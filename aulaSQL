use ti3k5791_gabryellycristinne;

CREATE TABLE  IF NOT EXIST clientes (
    idClientes INT PRIMARY KEY,nome VARCHAR(100),
telefone VARCHAR(100)
);
ALTER TABLE clientes ADD email VARCHAR(100);
MODIFY email TEXT;

-- como alterar uma tabela ja criada
ALTER TABLE clientes
CHANCE COLUMN email emailCliente VARCHAR

ALTER TABLE clientes
DROP COLUMN telefone;

-- trocar o nome
ALTER TABLE clientes

RENAME TO clientes;

-- deletar tabela

DROP TABLE clientes;
-- inserir dados na tabela
-- use ignore para deixar os ja inseridos
INSERT INTO clientes (idClientes, nome, email)
VALUES (1, 'gabryelly', 'gabryelly@gmail.com'),
(2, 'alana', 'alana@gmail.com');

-- como atualizar dados em uma tabela
UPDATE clientes
SET email = 'novo.@gmail.com'
WHERE idClientes = 1; -- condicao

--COMO DELETAR DADOS EM UMA TABELA
DELETE FROM clientes
WHERE idClientes = 1;

-- consulta simples retorna todos os dados da tabela
SELECT idClientes, nome, email
FROM clientes;

SELECT *
FROM clientes;

--consulta com ordenacao; retorna dados anteriores
SELECT emailCliente
FROM clientes
WHERE idClientes >1;


-- DEIXAR EM ORDEM
SELECT *
FROM clientes
ORDER BY nome DESC; -- asc



--como alterar uma tabela ja criada e remover

ALTER TABLE

--como deletar tabela
DROP TABLE clientes;

como inserir dados em uma tabela
INSERT INTO clientes (idClientes, nome, email)
VALUES (1, 'GABY', 'GABY@GMAIL.COM');


--
SELECT email
FROM clientes
WHERE idClientes = 1;


--consulta com ordenacao: retorna dados ordenados
SELECT idClientes, nome, email
FROM clientes
ORDER BY nome asc; --ou desc

SELECT nome
FROM clientes
WHERE email

--CONSULTA COM LIMITE DE RESULTADOS
SELECT idClientes, nome, email
FROM clientes
LIMIT 3;

SELECT DISTINCT email


CLEATE TABLE pedidos (
    idpedido INT AUTO_INCREMENT PRIMARY KEY,
    idClientes INT,
    numeroPedido VARCHAR(50),
    valorTotal DECIMAL(10, 2),
    dataPedido DATE,
    FOREIGN KEY (idClientes) REFERENCES clientes(idClientes)
    );




    INSERT INTO pedidos (idClientes, numeroPedido, valorTotal, dataPedido)
VALUES (1, 'PED-001', 150.00, '2024-07-12'),
       (2, 'PED-002', 200.00, '2024-07-12'),
       (1, 'PED-003', 100.00, '2024-07-12'); 



    SELECT SUM(valorTotal) AS valor_Total_pedidos
    FROM pedidos;
    --soma os pedidos

SELECT AVG(valorTotal) AS valor_Total_pedidos
FROM pedidos

SELECT MAX(numeroPedido) AS pedido_com_numero_mais_alto
doe


--consulta com juncao de tabelas

SELECT clientes.idClientes, clientes.nome, clientes.email, pedidos.numeroPedido
FROM clientes
INNER JOIN pedidos ON clientes.idCliente = pedidos.idCliente;

--consulta com  condicional
SELECT clientes.idCliente, clientes.nome, clientes.emailCliente, pedidos.valorTotal
FROM clientes
INNER JOIN pedidos ON clientes.idClientes = pedidos.idClientes
WHERE pedidos.valorTotal > 200;

SELECT nome, GROUP_CONCAT(emailCliente SEPARATOR ', ') AS email
FROM clientes
GROUP BY nome;

--CONTA NUMEROS DE PEDIDOS TOTAL
SELECT COUNT(*)
FROM pedidos;

SELECT clientes.nome, COUNT(pedidos.idpedido) AS valor_Total_pedidos
FROM clientes 
LEFT JOIN pedidos ON clientes.idClienteS = pedidos.idClientes 
GROUP BY clientes.nome;

CREATE PROCEDURE AumentarSalario(IN dep_id INT, IN percentual DECIMAL(5,2))
BEGIN
   UPDATE cargos
   SET salario = salario = (salario * (percentual / 100))
   WHERE departamento_id = dep_id;
END //

DELIMITER//

CREATE PROCEDURE diminuirSalarioDepartamento(in dep_id INT, IN valor DECIMAL(10, 2))
BEGIN
   UPDATE empregados
   SET salario = salario = valor
   WHERE departamento_id = dep_id;
END //

DELIMITER;

DELIMITER //

CREATE PROCEDURE diminuirSalarioDepartamento(IN dep_id INT, IN valor DECIMAL(10,2))
BEGIN
   UPDATE cargos
   SET salario = salario - valor
   WHERE departamento_id = dep_id;
END // 

DELIMITER;

use empresa;

CALL diminuirSalarioDepartamento(100, 50)
-- call chamar funcao
CREATE PROCEDURE mudarCargo(
    IN emp_id INT, 
    IN novo_titulo VARCHAR(50)

)
BEGIN

DECLARE titulo_existe INT; -- AQUI DECLARO UMA VARIAVEL

-- VERIFICA SE O NOVO TITULO EXISTE NA TABELA CARGOS
SELECT COUNT(*)
INTO titulo_existe
FROM CARGOS
WHERE titulo = novo_existe;


-- SE o titulo existe, execute o codigo
IF titulo_existe > 0 THEN
   -- atualiza o titulo do empregado
   UPDATE empregados
   SET titulo = novo_titulo
   WHERE empregados_id = emp_id;

SELECT COUNT(*)
FROM cargos
WHERE titulo    

Operador IN
O operador IN é usado para especificar múltiplos valores em uma cláusula WHERE. Ele é útil para filtrar linhas com base em uma lista de valores.


SELECT coluna1, coluna2
FROM tabela
WHERE coluna1 IN (valor1, valor2, valor3);


SELECT nome, departamento
FROM empregados
WHERE departamento IN ('Vendas', 'Marketing', 'TI');

Este exemplo retorna os empregados que trabalham nos departamentos de Vendas, Marketing ou TI.


------------------------------------------------------------------------------



BETWEEN
O operador BETWEEN é usado para selecionar valores dentro de um intervalo.

SELECT nome, salario
FROM empregados
WHERE salario BETWEEN 3000 AND 5000;


------------------------------------------------------------------------------


LIKE
O operador LIKE é usado para procurar um padrão específico em uma coluna.

SELECT nome
FROM empregados
WHERE nome LIKE 'A%';


Este exemplo retorna empregados cujos nomes começam com a letra 'A'.



SELECT nome
FROM empregados
WHERE nome LIKE '%a';

Este exemplo retorna todos os nomes que terminam com a letra 'a'.



SELECT nome
FROM empregados
WHERE nome LIKE '%an%';

Este exemplo retorna todos os nomes que contêm a substring 'an'.


SELECT nome
FROM empregados
WHERE nome LIKE 'A___';

Este exemplo retorna todos os nomes que começam com 'A' e têm exatamente quatro caracteres.


SELECT nome
FROM empregados
WHERE nome LIKE '_a%';

Este exemplo retorna todos os nomes onde a segunda letra é 'a'.



SELECT nome
FROM empregados
WHERE nome LIKE '%a_r%';

Este exemplo retorna todos os nomes que contêm 'a' seguido por qualquer caractere e depois 'r'.

